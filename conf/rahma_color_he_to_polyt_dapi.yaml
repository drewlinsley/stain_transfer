# metadata specialised for each experiment
core:
  version: 0.0.1
  tags:
    - rahama
data:
  datamodule:
    _target_: src.pl_data.datamodule.MyDataModule
    val_proportion: 0.15
    dataset_name: restainings  # Label for experiment
    transform_recipe: ${data.datamodule.dataset_name}
    datasets:
      restainings:
        train:
          _target_: src.pl_data.dataset.restainings_color_he_to_polyt_dapi
          train: True
          path: "/media/data_cifs/projects/prj_connectomics/rahma_v0_train.npz"
        val:
          _target_: src.pl_data.dataset.restainings_color_he_to_polyt_dapi
          train: False
          path: "/media/data_cifs/projects/prj_connectomics/rahma_v0_test.npz"
        test:
          _target_: src.pl_data.dataset.restainings_color_he_to_polyt_dapi
          train: False
          path: "/media/data_cifs/projects/prj_connectomics/rahma_v0_test.npz"
    num_workers:
      train: 3
      val: 3
      test: 3

    batch_size:
      train: 3
      val: 3
      test: 3
hydra:
  run:
    dir: ./experiments/${now:%Y-%m-%d}/${now:%H-%M-%S}

  sweep:
    dir: ./experiments/multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}/
    subdir: ${hydra.job.num}_${hydra.job.id}

  job:
    env_set:
      WANDB_START_METHOD: thread

logging:
  n_elements_to_log: 3
  normalize_visualization: True

  # log frequency
  val_check_interval: 1.0
  progress_bar_refresh_rate: 20

  wandb:
    project: u19_pilot
    entity: drewlinsley

    watch:
      log: 'all'
      log_freq: 10

  lr_monitor:
    logging_interval: "step"
    log_momentum: False
model:
  _target_: src.pl_modules.model.MyModel
  name: resunet_restaining_color_he_input
  num_classes: 2  # Using 2 for captum visualization :-(
  final_nl: False
  final_nl_dim: -1
  loss: cce_loss  # bce_loss

optim:
  optimizer:
    #  Adam-oriented deep learning
    _target_: torch.optim.Adam
    #  These are all default parameters for the Adam optimizer
    lr: 1e-3  # 0.001
    betas: [ 0.9, 0.999 ]
    eps: 1e-08
    weight_decay: 0.

  use_lr_scheduler: False
  lr_scheduler:
    _target_: torch.optim.lr_scheduler.CosineAnnealingWarmRestarts
    T_0: 10
    T_mult: 2
    eta_min: 0 # min value for the lr
    last_epoch: -1

train:
  # reproducibility
  deterministic: False
  random_seed: 42

  # training
  eval_only: False
  ckpt: False  # load pretrained weights
  pl_trainer:
    fast_dev_run: False # Enable this for debug purposes
    gpus: 3  # 1  # 4
    precision: 32
    max_steps: 2000000
    # accumulate_grad_batches: 8
    # num_sanity_val_steps: 2
    gradient_clip_val: 100000000.

  monitor_metric: 'val_loss'
  monitor_metric_mode: 'min'

  early_stopping:
    patience: 42
    verbose: False

  model_checkpoints:
    save_top_k: 2
    verbose: False
